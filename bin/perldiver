#!/usr/bin/perl

use strict;
use warnings;

our $VERSION = '0.01';

use autodie;
use Pod::Man;
use File::Temp;
use Getopt::Long qw(:config autohelp autoversion);

use PerlDiver;

my %opts = (
    search   => 0,
    pod      => 1,
    source   => 0,
    function => 0,
    variable => 0,
    local    => 0,
    pager    => $ENV{PAGER} || 'less',
    editor   => $ENV{EDITOR} || $ENV{PAGER} || 'vim',
);

GetOptions(
    \%opts, 'pager=s', 'editor=s',   'search',
    'pod',  'local',   'function|f', 'variable|v',
    'source'
) or Getopt::Long::HelpMessage(255);

my @targets = @ARGV
  or Getopt::Long::HelpMessage(
    { -msg => 'No arguments provided.', -exitval => 255 } );

$opts{local} = 1 if $opts{variable} or $opts{function};

my @backends
  = $opts{local}
  ? ( PerlDiver::Local->new() )
  : ( PerlDiver::Local->new(), PerlDiver::MetaCPAN->new() );

if ( $opts{search} ) {
    my @results;
    foreach my $be (@backends) {
        push @results, $be->search(@targets);
    }
    warn "Search returned no results (@targets).\n"
      unless @results;
    foreach my $result (@results) {
        print "$result->{distribution} - $result->{abstract}\n";
    }
}
elsif ( $opts{source} ) {
    foreach my $target (@targets) {
        my ( $source, $ft );
        foreach my $be (@backends) {
            ( $source, $ft )
              = eval { $be->source( $target, \%opts ) } and last;
        }
        warn "Could not locate source for '$target'.\n" and next
          unless $source;
        if ( -t STDOUT ) {
            my $tmp = File::Temp->new( SUFFIX => ".$ft" );
            print $tmp $source;
            system( $opts{editor}, $tmp );
        }
        else {
            print $source;
        }
    }
}
elsif ( $opts{pod} ) {
    foreach my $target (@targets) {
        my $pod;
        foreach my $be (@backends) {
            $pod = eval { $be->pod( $target, \%opts ) } and last;
        }
        warn "Could not locate pod for '$target'.\n" and next
          unless $pod;
        my $parser = Pod::Man->new( name => $target, section => 3 );
        if ( -t STDOUT ) {
            open PAGER, '|-', 'man', '-l', '-';
            $parser->output_fh(*PAGER);
            $parser->parse_string_document($pod);
            close PAGER;
        }
        else {
            $parser->output_fh(*STDOUT);
            $parser->parse_string_document($pod);
        }
    }
}

__END__

=head1 NAME

perldiver - CLI tool to find and browse perl modules and their documentation

=head1 SYNOPSIS

 perldiver [--pod] <PageName|ModuleName|ProgName|FileName>
 perldiver --source <PageName|ModuleName|ProgName|FileName>
 perldiver --search <Target>...
 perldiver --function <BuiltinFunctionName>
 perldiver --variable <BuiltinVariableName>
 perldiver (--help|--version)

=head1 DESCRIPTION

A comprehensive tool to find and view perl modules and their documentation.  By
default, both local modules/documentation and MetaCPAN will be searched.

=head1 OPTIONS

=over

=item B<--pod>

Retrieve and display pod documentation for the supplied page, module, or
program.

=item B<--source>

Retrieve and display the source code for the supplied page, module, or program.

=item B<--search>

Search for modules that match the provided targets.

=item B<--function>, B<-f>

Treat arguments as built-in perl functions.  Equivalent to C<< perldoc -f
<function> >>.  Implies B<--local>.

=item B<--variable>, B<-v>

Treat arguments as built-in perl variable.  Equivalent to C<< perldoc -v
<perlvar> >>.  Implies B<--local>.

=item B<--local>

Do not search remote repositories.

=item B<--pager>

Program to use for viewing rendered manpages.

=item B<--editor>

Program to use for viewing source code.

=back
